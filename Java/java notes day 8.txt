Java Day 8
------------

Collections Framework
=====================
ArrayList + HashMap
-------------------

ArrayList
=========
ArrayList is a strong and advanced alternative to Arrays. 
The advantage of AL is that it is flexible with size. 

Program: 
import java.util.ArrayList; 
import java.util.Collections;
   public class App {
	public static void main(String[] args) {
		 ArrayList<Integer> list = new ArrayList<>();
		 list.add(3);
		 list.add(6);
		 list.add(2);
		 list.add(1);
		 list.add(4);
		// list.add(4.5); -- Only Integer values can go in List
		 System.out.println(list);//[3, 6, 2, 1, 4]
		 /*
		  * Remove from the List
		  */
		 list.remove(1);
		 System.out.println(list);//[3, 2, 1, 4]
		 
		 /*
		  * Sorting
		  */
		 System.out.println("\n****Sorting******");
		 Collections.sort(list);
		 System.out.println(list);//[1, 2, 3, 4]
		 
		 System.out.println("\n****Reverse Sorting******");
		 Collections.reverse(list);
		 System.out.println(list); //[4, 3, 2, 1]
		 
		 System.out.println("\n****Binary Search******");
		 Collections.sort(list);//[1, 2, 3, 4]
		 int index = Collections.binarySearch(list, 4); 
		 System.out.println("4 found at index: " + index);
		 
		 System.out.println("\n****Iteration******");
		 for(int temp : list) {
			 System.out.print(temp + " ");
		 }
	}
} 
Features
-------
- AL takes duplicates 
- AL takes null 
- AL is fastest collection class in java 

HashMap
=======
- It takes key value pair. 
username: key : String
password: value : String 

pageNo: key : Integer
Topic: value : String

Program
-------
import java.util.HashMap; 
 public class App {
	public static void main(String[] args) {
		 HashMap<String,String> map =new HashMap<>();
		 map.put("harry", "potter");
		 map.put("ronald", "weasley");
		 map.put("hermione", "granger");
		 
		 System.out.println(map); //{ronald=weasley, harry=potter, hermione=granger}
		 
		 /*
		  * Fetch the value based on key 
		  */
		 String key="harry";
		 String value = map.get(key);
		 System.out.println("Password of " + key + " is " + value);
		 
		 /*
		  * Dictionary Structure
		  */
		 
		 HashMap<Integer,String> map1 = new HashMap<>();
		 map1.put(1,"Chronicles of Hogwards"); 
		 map1.put(2, "Harry and goblet of fire");
		 
		 System.out.println(map1);
		 String val = map1.get(2);
		 System.out.println("At page 2 topic is "+ val);
	}
} 


Java Unit Testing
=================
- JUnit is the gramework we will be using in Testing. 

Setting up Junit Environment in the project
-------------------------------------------
1. Download JUnit jar file 
(https://mvnrepository.com/artifact/junit/junit/4.13.1)
2. Download Hamcrest:Junit Runner jar file 
(https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all/1.3)
[mvnrepository.com]

3. Create a 'lib' folder in the project and paste the jar files in that folder. 

4. Add the jar files to the Build Path. 

@Test: Makes the method as test method. 
- Test methods are always public and void. 

Working with Annotations
========================
@Before : it executes before every test case
@After : After every test case 
@BeforeClass: Executes once right at the start
@AfterClass: Executes once right at the end. 

Examples:


import java.util.Arrays;
import java.util.Collections;

public class A {
	int sum(int x,int y){
		return x+y;
	}
	
	double computePercent
	(double marks,double totalMarks) {
		double percent = (marks * 100) / totalMarks;
		return percent; 
	}
	
	String computeGrade(double percent) {
		if(percent > 75)
			return "A";
		if(percent > 60)
			return "B";
		if(percent > 45)
			return "C";
		
		return "D";
		
	}
	
	Integer[] sortArrayAsc(Integer[] arr) {
		Arrays.sort(arr);
		return arr; 
	}
	
	Integer[] sortArrayDesc(Integer[] arr) {
		Arrays.sort(arr,Collections.reverseOrder());
		return arr; 
	}
	
	
	int computeLength(String name) {
		if(name == null)
			throw new NullPointerException("Name cannot be NULL");
		
		if(name.equals(""))
			throw new RuntimeException("Name cannot be blank");
		
		return name.length();
	}
}

Test Class
----------
import org.junit.Assert;
import org.junit.Test;

/*
 * Testing code for class A goes here.. 
 */
public class ATest {

	@Test
	public void sumTest(){
		A a=new A(); 
		Assert.assertEquals(12, a.sum(10,2));
		Assert.assertEquals(-2, a.sum(-4,2));
		Assert.assertEquals(-6, a.sum(-4,-2));
	}
	
	@Test
	public void computePercentTest() {
		A a=new A(); 
		Assert.assertEquals(80,Math.round(a.computePercent(321, 400)));
		Assert.assertEquals(81,Math.round(a.computePercent(322, 400)));
	}
	
	@Test
	public void computeGradeTest() {
		A a=new A(); 
		Assert.assertEquals("A",a.computeGrade(80));
		Assert.assertEquals("B",a.computeGrade(62));
		Assert.assertEquals("C",a.computeGrade(50));
		Assert.assertEquals("D",a.computeGrade(43));
	}
	
	@Test
	public void sortArrayAscTest() {
		Integer[] arr = new Integer[] {4,2,1,3};
		Integer[] expectedArr = new Integer[] {1,2,3,4};
		A a=new A(); 
		Assert.assertArrayEquals(expectedArr ,a.sortArrayAsc(arr)); 
	}
	
	@Test
	public void sortArrayDescTest() {
		Integer[] arr = new Integer[] {4,2,1,3};
		Integer[] expectedArr = new Integer[] {4,3,2,1};
		A a=new A(); 
		Assert.assertArrayEquals(expectedArr ,a.sortArrayDesc(arr)); 
	}
	@Test
	public void computeLengthTest() {
		A a=new A(); 
		Assert.assertEquals(5, a.computeLength("harry"));
		
		try {
			Assert.assertEquals(0 , a.computeLength(null));
		}
		catch(NullPointerException e) {
			Assert.assertEquals("Name cannot be NULL".toLowerCase(), e.getMessage().toLowerCase());
		}
		
		try {
			Assert.assertEquals(0 ,a.computeLength(""));
		}
		catch(RuntimeException e) {
			Assert.assertEquals("name cannot be Blank".toLowerCase() ,e.getMessage().toLowerCase());
		}
	}
}


Example 2:
---------

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class TestDemo {

	@BeforeClass
	public static void init() {
		System.out.println("before class..");
	}
	@Before
	public void m1() {
		System.out.println("before test...");
	}
	@Test
	public void sampleCase() {
		System.out.println("test 1...");
	}
	@Test
	public void sampleCase1() {
		System.out.println("test 2...");
	}
	@After
	public void m2() {
		System.out.println("after test...");
	}
	@AfterClass
	public static void end() {
		System.out.println("After class..");
	}
}
/*
 * before class
 * before --> test1 --> after
 * before --> test2 --> after
 * after class
 */

















